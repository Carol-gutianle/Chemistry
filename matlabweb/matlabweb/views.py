# Create your views here.
from django.http import HttpResponse
from django.shortcuts import render
from django.views.decorators import csrf
import json
import os
import numpy as np
import matlab.engine
import matplotlib.pyplot as plt


cdata= [[[0, 9.413, 0, 0, 0, 0, 0, 0.000002],
            [10, 9.375, 0.0073, 0.0057, 0.0005, 0.0165, 0.0001 * 0.5, 0.000002],
            [20, 9.3115, 0.0252, 0.0202, 0.0029, 0.0305, 0.0001 * 0.5, 0.000002],
            [30, 9.2521, 0.0476, 0.0384, 0.0129, 0.0398, 0.0001 * 0.5, 0.000002],
            [40, 9.2042, 0.0632, 0.0534, 0.0291, 0.0419, 0.0001 * 0.5, 0.000002],
            [50, 9.1716, 0.0798, 0.0638, 0.0515, 0.0389, 0.0007 * 0.5, 0.000002],
            [60, 9.144, 0.085, 0.0727, 0.0647, 0.0314, 0.0016 * 0.5, 0.000002],
            [70, 9.1073, 0.091, 0.0862, 0.0852, 0.0265, 0.0019 * 0.5, 0.000002],
            [80, 9.083, 0.0948, 0.0946, 0.1024, 0.0235, 0.0026 * 0.5, 0.000002],
            [90, 9.0639, 0.1003, 0.0988, 0.1157, 0.0209, 0.0032 * 0.5, 0.000002],
            [100, 9.0319, 0.1063, 0.1074, 0.1348, 0.0198, 0.0034 * 0.5, 0.000002],
            [110, 8.9941, 0.1126, 0.1105, 0.1567, 0.0181, 0.0045 * 0.5, 0.000002],
            [120, 8.9708, 0.1197, 0.1192, 0.1706, 0.0175, 0.0051 * 0.5, 0.000002]],
            [[0,9.413,0,0,0,0,0,0.000002],
            [10,9.3571,0.0154,0.009,0.0015,0.022,0.001*0.5,0.000002],
            [20,9.2479,0.0319,0.0443,0.0084,0.0399,0.001*0.5,0.000002],
            [30,9.1698,0.0564,0.065,0.0272,0.0436,0.001*0.5,0.000002],
            [40,9.1147,0.0829,0.084,0.0583,0.0391,0.001*0.5,0.000002],
            [50,9.0752,0.0999,0.0934,0.0838,0.0319,0.0019*0.5,0.000002],
            [60,9.0338,0.1066,0.11,0.1061,0.0281,0.0027*0.5,0.000002],
            [70,9.0149,0.1134,0.116,0.134,0.0237,0.003*0.5,0.000002],
            [80,8.9762,0.1198,0.1237,0.158,0.0209,0.0042*0.5,0.000002],
            [90,8.9646,0.1239,0.1258,0.1704,0.0181,0.0046*0.5,0.000002],
            [100,8.9466,0.1298,0.1298,0.1933,0.0171,0.0052*0.5,0.000002],
            [110,8.9199,0.136,0.1349,0.2084,0.0168,0.0059*0.5,0.000002],
            [120,8.8843,0.1433,0.1415,0.2194,0.0160,0.0066*0.5,0.000002]],
            [[0,9.413,0,0,0,0,0,0.000002],
            [10,9.3312,0.025,0.0129,0.0045,0.0274,0.001*0.5,0.000002],
            [20,9.2184,0.0709,0.0532,0.0166,0.0469,0.001*0.5,0.000002],
            [30,9.1077,0.096,0.0903,0.0661,0.0449,0.001*0.5,0.000002],
            [40,9.045,0.1107,0.1211,0.0934,0.0354,0.0022*0.5,0.000002],
            [50,8.9865,0.1199,0.1311,0.1341,0.0258,0.0033*0.5,0.000002],
            [60,8.931,0.1283,0.1387,0.1731,0.0227,0.0046*0.5,0.000002],
            [70,8.8828,0.1384,0.1474,0.2035,0.0201,0.0054*0.5,0.000002],
            [80,8.8582,0.1466,0.1518,0.2172,0.0182,0.0065*0.5,0.000002],
            [90,8.8356,0.1522,0.1547,0.2301,0.0180,0.0086*0.5,0.000002],
            [100,8.7991,0.1651,0.1616,0.247,0.0176,0.0098*0.5,0.000002],
            [110,8.7639,0.1728,0.1664,0.267,0.0161,0.0119*0.5,0.000002],
            [120,8.6851,0.1873,0.1782,0.3143,0.0153,0.0149*0.5,0.000002]],
            [[0,9.413,0,0,0,0,0,0.000002],
            [10,9.2485,0.0393,0.0259,0.0069,0.0504,0.001*0.5,0.000002],
            [20,9.1712,0.0969,0.0835,0.0386,0.0438,0.001*0.5,0.000002],
            [30,9.0134,0.1316,0.1371,0.0918,0.0351,0.002*0.5,0.000002],
            [40,8.9573,0.1411,0.1489,0.1313,0.0272,0.0036*0.5,0.000002],
            [50,8.8979,0.1523,0.1591,0.1677,0.026,0.005*0.5,0.000002],
            [60,8.8507,0.1615,0.1651,0.198,0.0253,0.0062*0.5,0.000002],
            [70,8.8118,0.1729,0.1722,0.236,0.0249,0.0076*0.5,0.000002],
            [80,8.7675,0.181,0.1805,0.2727,0.0229,0.0092*0.5,0.000002],
            [90,8.6667,0.1991,0.1897,0.3091,0.021,0.0137*0.5,0.000002],
            [100,8.6046,0.211,0.2004,0.3448,0.019,0.0166*0.5,0.000002],
            [110,8.5487,0.2183,0.2043,0.3798,0.0177,0.0221*0.5,0.000002],
            [120,8.4901,0.227,0.2183,0.4029,0.0167,0.029*0.5,0.000002]],
            [[0,9.413,0,0,0,0,0,0.000002],
            [10,9.0074,0.0789,0.0591,0.0086,0.0485,0.001*0.5,0.000002],
            [20,8.8662,0.118,0.1133,0.0551,0.0409,0.0025*0.5,0.000002],
            [30,8.6772,0.1472,0.1562,0.1807,0.0308,0.0032*0.5,0.000002],
            [40,8.6074,0.1612,0.167,0.224,0.0285,0.0052*0.5,0.000002],
            [50,8.556,0.1764,0.1755,0.2487,0.0265,0.0077*0.5,0.000002],
            [60,8.5061,0.1838,0.187,0.2773,0.0237,0.0103*0.5,0.000002],
            [70,8.4484,0.1965,0.1979,0.3105,0.0212,0.012*0.5,0.000002],
            [80,8.3975,0.2076,0.2069,0.3378,0.0201,0.0143*0.5,0.000002],
            [90,8.3056,0.2219,0.2289,0.3842,0.0183,0.0198*0.5,0.000002],
            [100,8.2378,0.2374,0.2365,0.4228,0.0174,0.0233*0.5,0.000002],
            [110,8.1866,0.2428,0.2417,0.4474,0.0162,0.0319*0.5,0.000002],
            [120,8.1242,0.2514,0.2583,0.4651,0.0155,0.042*0.5,0.000002]],
            [[0,9.4130, 0, 0, 0, 0, 0, 0.000001],
            [10.0000,9.4009,0.0029,0.0021,0.0000,0.0070,0.0000,0.000001],
            [20.0000,9.3769,0.0116,0.0086,0.0007,0.0145,0.0000,0.000001],
            [30.0000,9.3413,0.0249,0.0191,0.0034,0.0210,0.0000,0.000001],
            [40.0000,9.2974,0.0400,0.0318,0.0096,0.0246,0.0000,0.000001],
            [50.0000,9.2507,0.0541,0.0447,0.0194,0.0247,0.0000,0.000001],
            [60.0000,9.2061,0.0658,0.0562,0.0312,0.0225,0.0000,0.000001],
            [70.0000,9.1662,0.0749,0.0658,0.0433,0.0193,0.0001,0.000001],
            [80.0000,9.1314,0.0819,0.0735,0.0548,0.0163,0.0001,0.000001],
            [90.0000,9.1011,0.0873,0.0797,0.0653,0.0139,0.0002,0.000001],
            [100.0000,9.0741,0.0916,0.0848,0.0748,0.0121,0.0003,0.000001],
            [110.0000,9.0495,0.0952,0.0892,0.0836,0.0109,0.0004,0.000001],
            [120.0000,9.0266,0.0983,0.0930,0.0918,0.0100,0.0005,0.000001]],
            [[0,9.4130, 0, 0, 0, 0, 0,0.000004],
            [10.0000,9.3650,0.0111,0.0082,0.0006,0.0274,0.0000,0.000004],
            [20.0000,9.2743,0.0390,0.0309,0.0091,0.0506,0.0000,0.000004],
            [30.0000,9.1586,0.0684,0.0589,0.0343,0.0584,0.0000,0.000004],
            [40.0000,9.0433,0.0901,0.0832,0.0715,0.0531,0.0001,0.000004],
            [50.0000,8.9413,0.1044,0.1013,0.1107,0.0441,0.0002,0.000004],
            [60.0000,8.8533,0.1139,0.1145,0.1468,0.0366,0.0004,0.000004],
            [70.0000,8.7754,0.1207,0.1245,0.1794,0.0315,0.0007,0.000004],
            [80.0000,8.7042,0.1259,0.1325,0.2095,0.0283,0.0010,0.000004],
            [90.0000,8.6372,0.1302,0.1392,0.2379,0.0263,0.0015,0.000004],
            [100.0000,8.5731,0.1337,0.1449,0.2652,0.0248,0.0020,0.000004],
            [110.0000,8.5111,0.1368,0.1499,0.2918,0.0238,0.0026,0.000004],
            [120.0000,8.4507,0.1395,0.1543,0.3179,0.0230,0.0032,0.000004]]]
cdata=np.array(cdata).reshape(7,13,8)
# 矩阵转置，将7*13*8转为13*8*7，以适于matlab计算
cdata1=cdata.transpose(1,2,0)
cdata1=cdata1.tolist()
cdata1=matlab.double(cdata1)

# k0 e0  1*16
k0=matlab.double([3.9410e+09, 7.2655E+13, 3.0537e+09,   2.0515e+10, 4.3276e+05, 5.8511e+05, 5.5751e+06, 96335,    93745,    89522,    97733,    48514,    73059,    62138, 4500e+06, 320790])

# T 1*7
T = matlab.double([170+273,175+273,180+273,185+273,190+273,170+273,170+273])
eng = matlab.engine.start_matlab()

def draw_final():
    os.system("pltrun.py")


'''post'''
# # 接收cdata数据(list形式)
# def cdata_post(request):
#     # ctx ={}
#     if request.POST:
#         cdata = request.POST['cdata']
#     status = 0
#     result = "success!"
#     return HttpResponse(json.dumps({
#         "status": status,
#         "result": result
#     }))

# 接收文件, PS：未处理文件数据，不知道文件格式json? txt?，不清楚上传的文件数据格式
def cdata_post(request):
    file = request.FILES.get('file')  # 获取文件对象，包括文件名文件大小和文件内容
    print(file.name)  # 文件名
    print(file.size)  # 文件大小
    # 将文件写入本地
    f = open(file.name, 'wb')
    for line in file.chunks():  # 由于文件不是一次性上传的，因此一块一块的写入
        f.write(line)
    f.close()


'''get'''
def return_datas(request):
    request.encoding = 'utf-8'
    data1 = {}
    data2 = []

    data = {}
    '''传入k0,T,data，输出有两个，为时间，浓度'''
    # res_t, res_c,res_k,res_e = eng.mainPXKinetics(k0, T, cdata1, nargout=4)
    # # t为7*13*1
    # res_t = np.array(res_t).reshape(7, 13, 1)
    # res_c = np.array(res_c).reshape(7, 13, 7)
    # res_k = np.array(res_k).reshape(1, 7).tolist()
    # res_e = np.array(res_e).reshape(1, 7).tolist()
    # res_k = res_k[0]
    # res_e = res_e[0]
    # res_t = res_t[0]
    #
    # '''画图'''
    cwd = os.getcwd()
    # for i in range(0, 7):
    #     expdata = cdata[i]
    #     c = res_c[i]
    #     time = expdata[:, 0]  # 实验值--时间
    #     cexp = expdata[:, 1:8]  # 实验值--各化学物的浓度，大小：(13*7)
    #     fig = plt.figure(i)
    #     plt.plot(time, cexp[:, 1], 'ko', res_t, c[:, 1], 'k-', time, cexp[:, 2], 'r+', res_t, c[:, 2], 'r-', time, cexp[:, 3],
    #              'gs', res_t, c[:, 3], 'g-', time, cexp[:, 4], 'bs', res_t, c[:, 4], 'b-', time, cexp[:, 5], 'bs', res_t, c[:, 5],
    #              'b-')
    #     plt.xlabel('time(min)')
    #     plt.ylabel('concentration(mol/l)')
    #     plt.savefig(str(i)+'.png')
    # # draw_final()
    #

    for i in range(0, 7):
        data1[str(i)+'png']=str(cwd)+'\\'+str(i)+'.png'
    data['pngs']=data1

    res_k=[1,2,3,4,5,6,7]
    res_e = [1, 2, 3, 4, 5, 6, 7]

    inti=1
    for i,j in zip(res_k,res_e):
        data3={}
        data3['kValue'] = i #(1*7)
        data3['eValue'] = j #(1*7)
        data2.append(data3)
        inti += 1
    data['KE']=data2
    sample = json.dumps(data)  # json.dumps()把一个Python对象编，码转换成Json字符串。
    return HttpResponse(sample, content_type="application/json")  # 返回给前端

